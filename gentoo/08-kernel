#!/bin/bash -uex

cp --recursive "${SOURCE}/kernel" /mnt/gentoo/tmp/
trap "rm --recursive /mnt/gentoo/tmp/kernel" EXIT

OLD_ARCH=${ARCH}

case "$ARCH" in
  x86|x86_64|amd64)
    ARCH=x86
  ;;
esac

export ROOT_UUID="$(blkid -s UUID -o value ${ROOT_DEVICE})"

chroot /mnt/gentoo /bin/bash -uex <<'EOF'
#
# Prepare initramfs
#
source <(grep CONFIG_INITRAMFS_SOURCE /tmp/kernel/kernel.config)
export INITRAMFS_DIR=$(dirname $CONFIG_INITRAMFS_SOURCE)
mkdir --parents "$INITRAMFS_DIR"
envsubst '$INITRAMFS_DIR' < /tmp/kernel/initramfs.list > $CONFIG_INITRAMFS_SOURCE
envsubst '$ROOT_UUID' < /tmp/kernel/initramfs.init > "$INITRAMFS_DIR"/init
envsubst '$ROOT_UUID' < /tmp/kernel/initramfs.fstab > "$INITRAMFS_DIR"/fstab

#
# Apply custom kernel patches
#
mkdir --parents /etc/portage/patches/sys-kernel/gentoo-sources
cp /tmp/kernel/tuz.patch /etc/portage/patches/sys-kernel/gentoo-sources/

#
# Build kernel
#
emerge --verbose --quiet sys-kernel/gentoo-sources
cd /usr/src/linux
cp /tmp/kernel/kernel.config .config
make --quiet listnewconfig
make --quiet olddefconfig
make --quiet --jobs $CPUS
make --quiet modules_install

#
# Copy kernel to boot device
#
mkdir --parents /boot/efi/boot
cp arch/${ARCH}/boot/bzImage /boot/efi/boot/bootx64.efi
EOF

ARCH=${OLD_ARCH}
