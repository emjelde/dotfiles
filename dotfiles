#!/bin/bash

# Commands to manage dotfiles

set -o errexit -o nounset

help=$(cat <<'USAGE'
Usage: dotfiles command

Available commands are:
  apply  Apply salt states
  build  Build a Gentoo VM image
  run    Run the Gentoo VM image
  clean  Remove generated build files
  help   Display this help and exit
USAGE
)

# Display the help if no commands are given
if [ $# -eq 0 ]; then
   echo "$help"
   exit 1
fi

# Location of Packer output including files needed during the build
export BUILD=${BUILD:-build}

# Source environment variables from the .env file
source_env() {
   if [ -f .env ]; then
      set -o allexport
      source .env
      set +o allexport
   fi
}

# Auto-detect system capabilities for Gentoo Portage configuration and the
# Packer build.
source_vm_vars() {
   # When Packer is invoked it sometimes calls out to checkpoint.hashicorp.com to
   # look for new versions of Packer. Disable this for security and privacy
   # reasons.
   export CHECKPOINT_DISABLE=1

   # Location of the Packer cache
   export PACKER_CACHE_DIR="${BUILD}/packer_cache"

   # Enable Packer log
   export PACKER_LOG=1

   source gentoo/gentoo-vm-vars
}

# Call on the salt/salt-apply script to apply salt states. If the salt state
# files don't already exist they will be copied from this repository to the
# SALT_DIR (/srv/salt) otherwise use --force, -f to update the existing state
# files. Use --dry-run, -n to enable the test mode to review any changes that
# would occur if the states are applied.
apply() {
   salt/salt-apply "$@"
}

# Start the Gentoo base VM build only if the build output doesn't already
# exist. Accepts an optional parameter, if the parameter is true and the build
# output exists the script exits early.
build_gentoo_iso() {
   local only=${1:-false}
   if [ ! -e "${BUILD}/gentoo-iso" ]; then
      source_env
      source_vm_vars

      # Download the Gentoo autobuilds (minimal install ISO and Stage 3 tarball)
      source gentoo/gentoo-autobuild-vars

      export PACKER_LOG_PATH="${BUILD}/gentoo-iso.log"
      packer build \
             -var cpuflags="${CPU_FLAGS}" \
             -var cpus=${CPUS} \
             -var memory=${MEMORY} \
             -var gentoo_keyring="${GENTOO_KEYRING}" \
             -var gentoo_mirrors="${GENTOO_MIRRORS}" \
             -var gentoo_release_mirror="${RELEASE_MIRROR}" \
             -var gentoo_rsync_mirror="${RSYNC_MIRROR}" \
             -var gentoo_stage="${GENTOO_STAGE}" \
             -var iso_checksum="${ISO_CHECKSUM}" \
             -var iso_url="${ISO_URL}" \
             -var output_directory="${BUILD}/gentoo-iso" \
             gentoo/gentoo.pkr.hcl
   elif $only; then
      (>&2 echo 'Nothing to be done for gentoo-iso!')
      exit 1
   fi
}

# Continue the Gentoo build by applying the salt states to a VM that is backed
# by the Gentoo base VM. If the base VM doesn't exist it will be built first.
build_gentoo_salt() {
   build_gentoo_iso

   if [ ! -e "${BUILD}/gentoo-salt" ]; then
      source_env
      source_vm_vars

      export PACKER_LOG_PATH="${BUILD}/gentoo-salt.log"
      packer build \
             -var cpus=${CPUS} \
             -var memory=${MEMORY} \
             -var iso_url="${BUILD}/gentoo-iso/gentoo-iso" \
             -var output_directory="${BUILD}/gentoo-salt" \
             salt/salt.pkr.hcl
   else
      (>&2 echo 'Nothing to be done for gentoo-salt!')
      exit 1
   fi
}

# Call on the appropriate Gentoo VM build step
build() {
   local help=$(cat <<-USAGE
	Usage: dotfiles build [command]

	Builds a Gentoo VM using Packer, the default command is 'salt' if not specified.

	Available commands are:
	  iso   Build base Gentoo VM
	  salt  Build base and provision with salt
	  help  Display this help and exit
	USAGE
   )

   # Default to the 'salt' build command
   if [ $# -eq  0 ]; then
      build_gentoo_salt
      exit 0
   fi

   local only=true
   case "$1" in
      iso) shift; build_gentoo_iso $only ;;
      salt) shift; build_gentoo_salt ;;
      help) shift; echo "$help"; exit 0 ;;
      *) shift; echo "$help"; exit 1 ;;
   esac
}

# Run the Gentoo VM after one or more build steps
run() {
   local help=$(cat <<-USAGE
	Usage: dotfiles run [command]

	Runs the Gentoo VM image using QEMU, defaults to any available VM if command not specified.

	Available commands are:
	  iso   Run base Gentoo VM
	  salt  Run full Gentoo VM
	  help  Display this help and exit
	USAGE
   )

   local type=
   if [ $# -eq 0 ]; then
      type=$([ -e "${BUILD}/gentoo-salt" ] && echo salt || echo iso)
   else
      case "$1" in
         iso|salt) type="$1"; shift ;;
         help) shift; echo "$help"; exit 0 ;;
         *) shift; echo "$help"; exit 1 ;;
      esac
   fi
   if [ -e "${BUILD}/gentoo-${type}/gentoo-${type}" ]; then
      echo "Running gentoo-${type}..."

      source_env
      source_vm_vars

      qemu-system-x86_64 \
         -name "gentoo-${type}" \
         -machine type=pc,accel=kvm \
         -smp cpus="$CPUS",sockets="$CPUS" \
         -m "${MEMORY}M" \
         -boot c \
         -drive if=pflash,format=raw,readonly=on,file=/usr/share/edk2-ovmf/OVMF_CODE.fd \
         -drive file="${BUILD}/gentoo-${type}/gentoo-${type}",if=ide,cache=writeback,discard=ignore,format=qcow2
   else
      (>&2 echo "Must first build a Gentoo VM, try \`./dotfiles build\`")
      exit 1
   fi
}

# Remove all build output, including any downloaded Gentoo autobuilds,
# verification keys, caches, and VMs.
clean_all() {
   rm -rf "$BUILD"
}

# Remove VM build output. Accepts an optional parameter for the build type to
# remove, otherwise all VM builds are removed.
clean_build() {
   if [ $# -eq 0 ]; then
      clean_build 'iso'
      clean_build 'salt'
   else
      local type="${1}"
      rm -rf "${BUILD}/gentoo-${type}"{,.log}
   fi
}

# Call on the appropriate clean command
clean() {
   local help=$(cat <<-USAGE
	Usage: dotfiles clean [command]

	Remove build output, the default command is 'all' if not specified.

	Available commands are:
	  all           Remove all build output
	  build         Remove 'iso' and 'salt' builds
	  build <type>  Remove only 'iso' or 'salt' builds
	  help          Display this help and exit
	USAGE
   )

   # Default to the 'all' clean command
   if [ $# -eq  0 ]; then
      clean_all
      exit 0
   fi

   case "$1" in
      all) shift; clean_all ;;
      build) shift; clean_build "$@" ;;
      help) shift; echo "$help"; exit 0 ;;
      *) shift; echo "$help"; exit 1 ;;
   esac
}

# Run relative to the source directory
cd "${BASH_SOURCE%/*}"

case "$1" in
   apply) shift; apply "$@" ;;
   build) shift; build "$@" ;;
     run) shift;   run "$@" ;;
   clean) shift; clean "$@" ;;
   help) shift; echo "$help"; exit 0 ;;
   *) shift; echo "$help"; exit 1 ;;
esac
